import Gaussian.Gaussian
import Mathlib.Probability.Density
import Mathlib.Probability.Notation
import Mathlib.Analysis.SpecialFunctions.ExpDeriv
import Mathlib.Topology.Basic

open scoped ENNReal NNReal Real

/--- Define the PDF of exponential Probability depending on its Rate-/

noncomputable
def exponentialPDFReal (rate : ℝ) (ratePos : rate > 0) (x : ℝ): ℝ :=
ite (x ≥ 0) (rate*(Real.exp (-(↑rate*↑x)))) 0

/- The PDF on the extended real Numbers-/
noncomputable
def exponentialPDF (rate : ℝ) (ratePos : rate > 0) (x : ℝ) : ℝ≥0∞ :=
  ENNReal.ofReal (exponentialPDFReal rate ratePos x)

open MeasureTheory
open Measure


lemma root_of_exp {rate : ℝ} (ratePos : 0 < rate) :  ∀ x ∈ (Set.Ici 0), HasDerivAt (fun a => -1/(↑rate) * (Real.exp (-(↑rate * a)))) (Real.exp (-(↑rate * x))) x := by
  intro x hx; convert (((hasDerivAt_pow 1 x).const_mul (-↑rate)).exp.const_mul (-1/(↑ rate))) using 1;
  . simp only [pow_one, neg_mul];
  simp only [pow_one, neg_mul, Nat.cast_one, le_refl, tsub_eq_zero_of_le, pow_zero, mul_one, mul_neg]; rw[mul_comm (rexp _),<-neg_mul (-1/rate),<- neg_div, <-mul_assoc]; simp only [neg_neg,
    one_div, ne_eq]; rw[inv_mul_cancel ?_]; ring; exact ne_of_gt ratePos

lemma lt_ge_disjoint (x c : ℝ) : Disjoint {x : ℝ | x ≥ c} {x | x < c} := by
  rw [@Set.disjoint_iff]; rintro x ⟨hxge, hxlt⟩; dsimp at *; linarith

lemma real_open_is_measurable {s : Set ℝ} (h: IsOpen s) : MeasurableSet s := by apply IsOpen.measurableSet h

lemma comp_of_ge {x : ℝ} : {x : ℝ | x ≥ 0}ᶜ =  {x | x < 0} := by ext x; constructor <;> simp


lemma comp_of_le {x : ℝ} : {x :ℝ  | x ≤  0}ᶜ =  {x | x > 0} := by ext x; constructor; simp only [ Set.setOf_eq_eq_singleton, Set.mem_compl_iff, Set.mem_singleton_iff, gt_iff_lt, Set.mem_setOf_eq]; push_neg; intro hx; exact hx; simp only [gt_iff_lt,
  Set.mem_setOf_eq, Set.mem_compl_iff, not_le, imp_self]

/- Split integral for real case (Rémys approach), need the integratable statements so that integral union is usable -/

lemma integral_eq_lt_and_ge (f: ℝ → ℝ) (c : ℝ)  : (IntGE : IntegrableOn (fun x => f x) {x | x ≥ c}) →
      (IntLT : IntegrableOn (fun x => f x) {x | x < c}) → ∫ (x : ℝ), f x  =  (∫ (x : ℝ) in {x | x ≥ c}, f x) +  ∫ (x : ℝ) in {x | x < c}, f x := by

  have union : Set.univ = {x: ℝ | x ≥ c} ∪ {x : ℝ | x < c} := by
    ext x; constructor; intro hx; by_cases x ≥ c; left; exact h
    push_neg at h; right; exact h
    intro hx; rcases hx  <;> trivial
  have : IsOpen {x : ℝ | x < c} := by exact isOpen_gt' c
  intro IntGE IntLT
  calc
  ∫ (x : ℝ), f x = ∫ (x : ℝ) in Set.univ, f x := by rw [integral_univ]
  _ = ∫ (x : ℝ) in {x | x ≥ c} ∪ {x | x < c} , f x ∂ volume := by rw [<-union]
  _ = _ := by
    apply integral_union;
    . apply (lt_ge_disjoint _ c); exact c;
    . exact real_open_is_measurable this
    . exact IntGE
    . exact IntLT


/- Splitting the integral for the own version o the case -/

lemma lintegral_eq_lt_and_ge1 (f: ℝ → ENNReal) (c : ℝ) :  ∫⁻ (x : ℝ), f x  =  (∫⁻ (x : ℝ) in {x | x ≥ c}, f x) +  ∫⁻ (x : ℝ) in {x | x < c}, f x := by
  have union : Set.univ = {x: ℝ | x ≥ c} ∪ {x : ℝ | x < c} := by
    ext x; constructor; intro hx; by_cases x ≥ c; left; exact h
    push_neg at h; right; exact h
    intro hx; rcases hx  <;> trivial

  have : IsOpen {x : ℝ | x < c} := by exact isOpen_gt' c
  calc
  ∫⁻ (x : ℝ), f x = ∫⁻ (x : ℝ) in Set.univ, f x ∂ volume := by exact (set_lintegral_univ fun x => f x).symm
  _ = ∫⁻ (x : ℝ) in {x | x ≥ c} ∪ {x | x < c} , f x ∂ volume := by rw [<-union]
  _ = _ := by
    apply lintegral_union;
    . refine real_open_is_measurable this
    . rw [@Set.disjoint_iff]; rintro x ⟨hxge, hxlt⟩; dsimp only [Set.mem_setOf_eq] at *; linarith --with lemma lt_ge_disjoint?

open ProbabilityTheory

/-- The exponential pdf is measurable. -/

lemma measurable_exponentialPDFReal (rate : ℝ) (ratePos : rate > 0) : Measurable (exponentialPDFReal rate ratePos) := by
  have : Measurable fun x => (rate*(Real.exp (-(↑rate*↑x)))):= (measurable_id'.const_mul rate).neg.exp.const_mul rate
  unfold exponentialPDFReal; refine Measurable.ite ?hp this ?hg;
  . refine MeasurableSet.of_compl ?hp.h; apply real_open_is_measurable; rw [comp_of_ge]; exact isOpen_gt' 0 ; exact rate;
  . exact measurable_const

/-

lemma measurable_exponentialPDFRight (rate : ℝ) (ratePos : rate > 0) : Measurable fun x => ENNReal.ofReal ↑rate * ENNReal.ofReal (rexp (-(↑rate * x))) := by
  have : Measurable fun x => (rate*(Real.exp (-(↑rate*↑x)))):= (measurable_id'.const_mul rate).neg.exp.const_mul rate
  unfold exponentialPDFReal; refine Measurable.ite ?hp this ?hg;
  . refine MeasurableSet.of_compl ?hp.h; apply real_open_is_measurable; rw [comp_of_ge]; exact isOpen_gt' 0 ; exact rate;
  . exact measurable_const -/

/-- The exponential pdf is strongly measurable. Needed to transfer lintegral to integral -/

lemma stronglyMeasurable_exponentialPDFReal (rate : ℝ) (ratePos : rate > 0) :
    StronglyMeasurable (exponentialPDFReal rate ratePos) :=
  (measurable_exponentialPDFReal rate ratePos).stronglyMeasurable

lemma exponentialPDFReal_pos (xPos : 0 < x) : exponentialPDFReal rate ratePos x > 0 := by
  unfold exponentialPDFReal
  conv =>
    lhs
    rw[if_pos (le_of_lt xPos)]
  exact mul_pos ratePos (Real.exp_pos _)

lemma exponentialPDFReal_nonneg :∀ x : ℝ, exponentialPDFReal rate ratePos x ≥ 0 := by
  unfold exponentialPDFReal
  intro x;
  by_cases x ≥  0
  . conv =>
      lhs
      rw[if_pos h]
    exact mul_nonneg (le_of_lt ratePos) (le_of_lt (Real.exp_pos _))
  . conv  =>
      lhs
      rw[if_neg h]

lemma IntSeqMonotone : Monotone (fun n : ℕ  => Set.Icc (0 : ℝ) ↑n) := by
  refine monotone_nat_of_le_succ ?hf; intro n; refine Set.le_iff_subset.mpr ?hf.a; refine
    Set.Icc_subset_Icc_right ?hf.a.h; refine Nat.cast_le.mpr ?hf.a.h.a; simp only [le_add_iff_nonneg_right]

lemma UnionofIcc : (⋃ n : ℕ , Set.Icc (0 : ℝ) ↑n) = Set.Ici 0 := by
  ext x;  simp only [ge_iff_le, Nat.cast_nonneg, not_true, gt_iff_lt, Set.mem_iUnion, Set.mem_Icc, exists_and_left, Set.mem_Ici, and_imp, forall_exists_index];
  constructor; intro h; exact h.1
  intro h; constructor; exact h; exact exists_nat_ge x

lemma IntegrableOnposInterval {b : ℝ} (hb : 0 < b) : IntegrableOn (fun x => rexp (-(b * x))) (⋃ (n : ℕ), Set.Icc (0 : ℝ) ↑n) := by
  rw [UnionofIcc]
  --have IntegrableOpen : IntegrableOn (fun x => rexp (-b * x)) (Set.Ioi 0) := by apply (exp_neg_integrableOn_Ioi 0 hb)
  --(hfi : IntegrableOn f (⋃ (n : ι), s n))
  have : ∀ x : ℝ , (rexp (-(b * x)) = rexp (-b * x)) := by intro x; rw [@neg_mul_eq_neg_mul]
  simp only [this]
  apply integrableOn_Ici_iff_integrableOn_Ioi.2 (exp_neg_integrableOn_Ioi 0 hb)

/- Approach like Rémy for Gaussian, right now fail to prove Integrability of either all of exponentialPDFReal or its left and right Part

def lintegral_exponentialPDF_eq_one (rate : ℝ) (ratePos : 0 < rate) :
  ∫⁻ (x : ℝ), exponentialPDF rate ratePos x = 1 := by
  rw [←ENNReal.toReal_eq_one_iff]
  have hfm : AEStronglyMeasurable (exponentialPDFReal rate ratePos) ℙ :=
    (stronglyMeasurable_exponentialPDFReal rate ratePos).aestronglyMeasurable
  have hf : 0 ≤ₐₛ exponentialPDFReal rate ratePos := ae_of_all _ (exponentialPDFReal_nonneg)

  have integratable : Integrable (fun x => exponentialPDFReal rate ratePos x) := by
    unfold Integrable; constructor; apply hfm;
    unfold HasFiniteIntegral; sorry

  unfold exponentialPDF; rw [← integral_eq_lintegral_of_nonneg_ae (f:=exponentialPDFReal rate ratePos) hf hfm]
  unfold exponentialPDFReal;
  rw [integral_eq_lt_and_ge (fun x => if x ≥ 0 then rate * rexp (-(rate * x)) else 0) 0 ?intGE ?intLT]
  . sorry
  . simp only [ge_iff_le]; rw [@integrableOn_def]; unfold Integrable; constructor; apply (StronglyMeasurableAtFilter ?h)
-/


/- Own approach, stays in lintegral for longer, right now end at Part of trying to integrate right side (the real domain of definition) to 1, because of lintegral-/

lemma if_eval_pos : ∀ᵐ  x : ℝ ∂ volume , (x ∈ {x|x < 0} →  ENNReal.ofReal (if ((x : ℝ) ≥  0) then ( (rate * rexp (-(↑rate * x)))) else 0 ) = 0 ):= by
      apply ae_of_all
      intro x hx; split_ifs with h; simp only [ge_iff_le] at h ;
      . contrapose h; push_neg; exact hx
      . exact ENNReal.ofReal_zero

lemma if_eval_neg :  ∀ᵐ  x : ℝ ∂ volume , (x ∈ {x|x ≥ 0} →  ENNReal.ofReal (if ((x : ℝ) ≥  0) then (rate * rexp (-(↑rate * x))) else 0 ) = ENNReal.ofReal (rate * rexp (-(↑rate * x))) ):= by
      apply ae_of_all
      intro x hx; split_ifs with h; simp only [ge_iff_le] at h ;
      . rfl
      contrapose h; simp only [ge_iff_le, not_le, not_lt]; exact hx

lemma rootTendsZero {rate : ℝ} : rate > 0 →  Filter.Tendsto (fun x => -1/(rate) * (Real.exp (-(rate * x)))) Filter.atTop (nhds 0) := by
  rw [@Metric.tendsto_atTop]; intro ratePos ε εpos;
  by_cases ε * rate < 1
  use (2*(-(rate)⁻¹*(Real.log (ε * rate)))); intro n hn
  simp only [dist_zero_right, norm_mul, norm_div, norm_neg, norm_one, Real.norm_eq_abs, NNReal.abs_eq,
  Real.abs_exp, one_div, ne_eq, NNReal.coe_eq_zero]; apply lt_of_mul_lt_mul_left _ (le_of_lt ratePos); rw[<-mul_assoc, abs_eq_self.2 (le_of_lt ratePos) , mul_inv_cancel, one_mul, <-Real.lt_log_iff_exp_lt (mul_pos ratePos εpos), neg_lt];
  have invPos: (0 : ℝ) < (↑rate)⁻¹  := by apply inv_pos.2 ratePos
  apply lt_of_mul_lt_mul_left (b:=-Real.log (↑rate * ε)) _ (le_of_lt invPos);
  simp only [NNReal.val_eq_coe, NNReal.coe_inv, mul_neg, NNReal.coe_eq_zero]
  rw[<-mul_assoc, inv_mul_cancel, one_mul]
  apply lt_of_le_of_lt' hn; rw[mul_comm ε, neg_mul]; nth_rw 1 [<-one_mul (-((↑rate)⁻¹ * Real.log (↑rate * ε)))]
  apply mul_lt_mul_of_pos_right; norm_num; simp; apply mul_neg_of_pos_of_neg; apply invPos; apply Real.log_neg
  exact mul_pos ratePos εpos; rw [mul_comm]; exact h; intro fal; linarith; linarith;
  sorry

  lemma rootTendsZero2 {rate : ℝ} : rate > 0 →  Filter.Tendsto (fun x => -1/(rate) * (Real.exp (-(rate * x)))) Filter.atTop (nhds 0) := by
    --intro ratePos; rw[<-mul_zero (-1/rate)]; apply ENNReal.Tendsto.const_mul (a:=(-1/rate)) (b:=0) (f:=Filter.atTop) (m:=(fun x => ENNReal.ofReal (Real.exp (-(rate * x)))))
    sorry

lemma lintegral_exponentialPDF_eq_one1 (rate : ℝ) (ratePos : (0 : ℝ) < rate) :
  ∫⁻ (x : ℝ), exponentialPDF rate ratePos x = 1 := by
    rw [lintegral_eq_lt_and_ge1 (exponentialPDF rate ratePos) 0, ←ENNReal.toReal_eq_one_iff];

    have leftSide: ∫⁻ (x : ℝ) in {x | x < 0}, exponentialPDF rate ratePos x = 0 := by
      unfold exponentialPDF exponentialPDFReal; rw [set_lintegral_congr_fun (real_open_is_measurable (isOpen_gt' 0)) if_eval_pos]; exact lintegral_zero

    have rightSide: ∫⁻ (x : ℝ) in {x | x ≥ 0}, exponentialPDF rate ratePos x = ∫⁻ (x : ℝ) in {x | x ≥ 0}, ENNReal.ofReal (rate * rexp (-(rate * x))) := by
      unfold exponentialPDF exponentialPDFReal; apply set_lintegral_congr_fun _ _
      . refine MeasurableSet.of_compl ?h; rw [comp_of_ge]; refine real_open_is_measurable ?h.h; exact isOpen_gt' 0; exact rate
      exact if_eval_neg

    rw [leftSide]; simp only [ge_iff_le, add_zero];
    rw [rightSide, ENNReal.toReal_eq_one_iff, ←ENNReal.toReal_eq_one_iff]

    have hf : 0 ≤ᵐ[(restrictₗ {x:ℝ | x ≥ 0}) ℙ] (fun x => rate * (rexp (-(rate * x)))) := by
      apply ae_of_all _ ?a;
      have ratePos': (0:ℝ) < rate := by assumption
      have expPos : ∀ x : ℝ, 0 < rexp (-(rate * x)) := by intro x; apply Real.exp_pos (-(rate * x))
      simp only [Pi.zero_apply, gt_iff_lt, NNReal.coe_pos]; intro a; apply le_of_lt; rw[<-zero_mul 0]; apply mul_lt_mul'' ratePos' (expPos a); trivial; trivial
    rw [← @restrictₗ_apply, ← integral_eq_lintegral_of_nonneg_ae hf ?_]
    let F : (ℝ → ℝ) := fun x => -1/(rate) * (Real.exp (-(rate * x)))
    . simp only [ge_iff_le, restrictₗ_apply]; rw [@integral_mul_left, Set.Ici_def];
      rw [@integral_Ici_eq_integral_Ioi]
      have IntegrOn : IntegrableOn (fun x => rexp (-(rate * x))) (Set.Ioi 0) := by simp only [<-neg_mul]; apply exp_neg_integrableOn_Ioi 0 ratePos

      rw [integral_Ioi_of_hasDerivAt_of_tendsto' (f:=F) (root_of_exp ratePos) IntegrOn (rootTendsZero ratePos)]
      simp only [mul_zero, neg_zero, Real.exp_zero, mul_one, _root_.zero_sub]; rw [neg_div]; simp only [one_div,neg_neg, ne_eq, NNReal.coe_eq_zero]; rw[mul_inv_cancel]; linarith
    apply ((measurable_id'.const_mul rate).neg.exp.const_mul rate).stronglyMeasurable.aestronglyMeasurable



/- /-- **Fundamental theorem of calculus-2**, on semi-infinite intervals `(a, +∞)`.
When a function has a limit at infinity `m`, and its derivative is integrable, then the
integral of the derivative on `(a, +∞)` is `m - f a`. Version assuming differentiability
on `[a, +∞)`. -/
theorem integral_Ioi_of_hasDerivAt_of_tendsto' (hderiv : ∀ x ∈ Ici a, HasDerivAt f (f' x) x)
    (f'int : IntegrableOn f' (Ioi a)) (hf : Tendsto f atTop (𝓝 m)) :
    ∫ x in Ioi a, f' x = m - f a := by
  refine integral_Ioi_of_hasDerivAt_of_tendsto (fun x hx ↦ ?_) (fun x hx => hderiv x hx.out.le)
    f'int hf
  exact (hderiv x hx).continuousAt.continuousWithinAt-/


/- Define a Probability Measure on the PDF-/



open MeasureTheory

/- Measure defined by the exponential Distribution -/

noncomputable
def expMeasure (rate : ℝ≥0) (ratePos : rate > 0) : Measure ℝ :=
   Measure.withDensity volume (exponentialPDF rate ratePos)

/- Get the CDF of the exponential Distribution by integrating over the PDF-/
